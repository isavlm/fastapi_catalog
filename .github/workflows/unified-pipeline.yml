name: FastAPI Catalog CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-west-2
  EC2_HOST: 52.39.46.176
  EC2_USERNAME: ec2-user
  DATABASE_URL: postgresql://root:toor@localhost:5432/ioet_catalog_db
  POETRY_VERSION: 1.7.1

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: toor
          POSTGRES_DB: ioet_catalog_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 5s
          --health-timeout 5s
          --health-retries 3
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 1

    - uses: actions/setup-python@v4
      with:
        python-version: '3.10.12'
        cache: 'pip'

    - name: Cache Poetry dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pypoetry
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-

    - name: Install and configure Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 - --version ${{ env.POETRY_VERSION }}
        poetry config virtualenvs.create false

    - name: Install dependencies
      run: poetry install --no-interaction --no-root

    - name: Run linting
      run: poetry run flake8 .

    - name: Run tests
      run: poetry run pytest -v

  deploy:
    name: Deploy to EC2
    needs: lint-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 1

    - name: Configure SSH
      run: |
        mkdir -p ~/.ssh/
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/ec2.pem
        chmod 600 ~/.ssh/ec2.pem
        echo -e "Host ec2\n\tHostName ${{ env.EC2_HOST }}\n\tUser ${{ env.EC2_USERNAME }}\n\tIdentityFile ~/.ssh/ec2.pem\n\tStrictHostKeyChecking no" > ~/.ssh/config

    - name: Deploy to EC2
      run: |
        # Stop the existing service
        ssh ec2 'sudo systemctl stop fastapi-catalog || true'
        
        # Backup current version
        ssh ec2 'if [ -d ~/Backend-Master-Challenge ]; then mv ~/Backend-Master-Challenge ~/Backend-Master-Challenge-$(date +%Y%m%d_%H%M%S); fi'
        
        # Copy new files
        scp -r ./ ec2:~/Backend-Master-Challenge/
        
        # Install Poetry and dependencies
        ssh ec2 'curl -sSL https://install.python-poetry.org | python3 - --version ${{ env.POETRY_VERSION }} && cd ~/Backend-Master-Challenge && poetry config virtualenvs.create false && poetry install --no-interaction'
        
        # Start the service
        ssh ec2 'sudo systemctl start fastapi-catalog'
        
        # Verify deployment
        ssh ec2 'sudo systemctl is-active fastapi-catalog --quiet || (echo "Service failed to start" && exit 1)'

    - name: Health Check
      run: |
        # Wait for service to be fully up
        sleep 5
        # Check health endpoint
        curl --fail http://${{ env.EC2_HOST }}:8000/health_check/ || (echo "Health check failed" && exit 1)
